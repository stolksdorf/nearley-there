const fs = require('fs');

const Nearley = require('nearley/lib/nearley.js');
const Compile = require('nearley/lib/compile.js');
const Generate = require('nearley/lib/generate.js');
const nearleyGrammar = require('nearley/lib/nearley-language-bootstrapped.js');


const resolvePath = (text)=>{
	try{
		if(fs.statSync(text).isFile()) return fs.readFileSync(text, 'utf8');
		return text;
	}catch(e){
		return text;
	}
};

const compileGrammar = (grammar)=>{
	let compiled = Generate(
		Compile(
			(new Nearley.Parser(
					nearleyGrammar.ParserRules,
					nearleyGrammar.ParserStart)
			)
				.feed(grammar)
				.results[0]
		,{})
	).split('\n');

	//Cut off unneeded Nearley generated code
	compiled = compiled.slice(3, compiled.length - 7).join('\n');

	return `const Nearley = require('nearley');

/** Generated by Nearley.js **/
${compiled}
/** End **/

const CompiledGrammar = new Nearley.Parser(grammar.ParserRules,grammar.ParserStart).grammar;

module.exports = (input)=>{
	return (new Nearley.Parser(CompiledGrammar))
		.feed(input)
		.results[0];
};`;
}


const NearleyThere = {
	parse : (grammar, target)=>{
		grammar = resolvePath(grammar);
		return eval(`
${compileGrammar(grammar)}
try{module.exports("${target}")}catch(err){err;}`);
	},
	compile : (grammar, destination = false)=>{
		const result = compileGrammar(resolvePath(grammar));
		if(destination) fs.writeFileSync(destination, result);
		return result;
	}
};

module.exports = NearleyThere;